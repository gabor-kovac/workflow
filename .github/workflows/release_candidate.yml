name: Create release candidate

on:
  workflow_call:
    secrets:
      token: 
        required: false
        
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  packages: write

jobs:
  Increase_Version_TypeScript:
    if: (github.event.repository.language == 'TypeScript' || github.event.repository.language == 'Dockerfile')
    runs-on: ubuntu-latest
    outputs:
      newVersion: ${{ steps.package_version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bump minor version
        id: package_version
        uses: gedclack/simple-bump-package-json@v1.0.0
        with:
          bump-mode: minor
          
      - name: Commit new version
        run: |
          git pull
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -am "CI: bump package version to ${{ steps.package_version.outputs.new-version }}"
          git push -u

  Increase_Version_CSharp:
    if: github.event.repository.language == 'C#'
    runs-on: ubuntu-latest
    outputs:
      newVersion: ${{ steps.set_version.outputs.newVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bump minor version
        id: set_version
        uses: vers-one/dotnet-project-version-updater@v1.7
        with:
          files: "Source/**/*.csproj"
          version: '*.^.0'

      - name: Commit new version
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -am "CI: bump C# version to ${{ steps.set_version.outputs.newVersion }}"
          git push

  Create_Artifact:
    needs: [Increase_Version_TypeScript, Increase_Version_CSharp]
    if: ((always() && needs.Increase_Version_TypeScript.result == 'success') || (always() && needs.Increase_Version_CSharp.result == 'success'))
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout main branch
        if: (github.event_name == 'pull_request' && github.base_ref == 'main')
        uses: actions/checkout@v4
        with: 
          ref: '${{github.base_ref}}'
      
      - name: Pull all changes 
        run: git pull

      - name: Save head sha
        id: headSha
        run: echo "HEAD_SHA=$(git log -1 --format=%H)" >> $GITHUB_OUTPUT
        
      - name: Lowercase the name of the repository 
        id: LowercaseRepositoryName
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.event.repository.name }}
      
      - name: Get the name of the current branch
        id: GetCurrentBranchName
        uses: tj-actions/branch-names@v8
            
      - name: Login to the GitHub Container regsitry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image (TypeScript projects)
        if: ((github.event.repository.language == 'TypeScript' || github.event.repository.language == 'Dockerfile') && github.event_name == 'pull_request')
        run: |
          docker build --platform linux/amd64 --tag ghcr.io/gabor-kovac/${{ steps.LowercaseRepositoryName.outputs.lowercase }}:${{ needs.Increase_Version_TypeScript.outputs.newVersion }} --file ./Dockerfile --output=type=registry --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" .

      - name: Build docker image (C# projects)
        if: (github.event.repository.language == 'C#' && contains(github.repository, 'Lib') == false)
        run: |
          docker build --push --platform linux/amd64 --tag ghcr.io/gabor-kovac/${{ steps.LowercaseRepositoryName.outputs.lowercase }}:${{ needs.Increase_Version_CSharp.outputs.newVersion }} --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" --build-arg NUGET_TOKEN=${{ secrets.GITHUB_TOKEN }} .

      - name: Build and publish NuGet package (C# Lib projects)
        if: (github.event.repository.language == 'C#' && contains(github.repository, 'Lib'))
        working-directory: ./Source
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet pack --configuration Release -o ./nupkg /p:PackageVersion=${{ needs.Increase_Version_CSharp.outputs.newVersion }}
          dotnet nuget push ./nupkg/*.nupkg --source ${{ env.NUGET_SOURCE }} --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NUGET_SOURCE: "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      # Create tag

      - name: Create tag
        if: (github.event_name == 'pull_request' && github.base_ref == 'main')
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ needs.Increase_Version_TypeScript.outputs.newVersion || needs.Increase_Version_CSharp.outputs.newVersion  }}
          tag_prefix: " "
          commit_sha: ${{ steps.headSha.outputs.HEAD_SHA }}
